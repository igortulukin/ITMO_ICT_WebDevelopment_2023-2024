{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u041e\u0442\u0447\u0435\u0442 \u043f\u043e \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u043c \u0440\u0430\u0431\u043e\u0442\u0430\u043c","text":""},{"location":"Lab1/Task1/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1","text":"<p>\u0417\u0430\u0434\u0430\u0447\u0430: \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0421\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430.</p> <p>\u041b\u0438\u0441\u0442\u0438\u043d\u0433 \u043a\u043e\u0434\u0430:</p> Server.py<pre><code>import socket\n\nsock = socket.socket(family=socket.AF_INET, type=socket.SOCK_DGRAM)\nsock.bind(('', 9090))\n\nwhile True:\n    data = sock.recvfrom(1024)\n    if not data:\n        break\n    print(data[0].decode(\"utf-8\"))\n    sock.sendto(b'Hello, Client!', data[1])\n    break\n</code></pre> Client.py<pre><code>import socket\n\nsock = socket.socket(family=socket.AF_INET, type=socket.SOCK_DGRAM)\nsock.connect(('localhost', 9090))\nsock.send(b'Hello, Server!')\n\ndata = sock.recv(1024)\nsock.close()\n\nprint(data.decode('utf-8'))\n</code></pre> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0440\u0430\u0431\u043e\u0442\u044b \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b:  </p>"},{"location":"Lab1/Task2/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2","text":"<p>\u0417\u0430\u0434\u0430\u0447\u0430: \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443.  a. \u0422\u0435\u043e\u0440\u0435\u043c\u0430 \u041f\u0438\u0444\u0430\u0433\u043e\u0440\u0430</p> <p>\u041b\u0438\u0441\u0442\u0438\u043d\u0433 \u043a\u043e\u0434\u0430:</p> Server.py<pre><code>import math\nimport socket\n\nsock = socket.socket()\nsock.bind(('', 9090))\nsock.listen(10)\nconn, addr = sock.accept()\n\nprint('connected:', addr)\n\nwhile True:\n    data = conn.recv(16384)\n    if not data:\n        break\n    sides = [int(x) for x in data.split()]\n    if len(sides) != 2:\n        conn.send(b'Wrong number of sides')\n    else:\n        side = math.sqrt(sides[0]**2 + sides[1]**2)\n        conn.send(bytes(str(side), 'utf-8'))\n    print(data.decode(\"utf-8\"))\n\n\nconn.close()\n</code></pre> Client.py<pre><code>import socket\n\nsock = socket.socket()\nsock.connect(('localhost', 9090))\nprint('Enter sides')\ndata = input()\nsock.send(bytes(data, 'utf-8'))\n\ndata = sock.recv(1024)\nsock.close()\n\nprint(data.decode('utf-8'))\n</code></pre> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0440\u0430\u0431\u043e\u0442\u044b \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b:  </p>"},{"location":"Lab1/Task3/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3","text":"<p>\u0417\u0430\u0434\u0430\u0447\u0430: \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u0412 \u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 http-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html.</p> <p>\u041b\u0438\u0441\u0442\u0438\u043d\u0433 \u043a\u043e\u0434\u0430:</p> page.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;title&gt;Page&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;Hello world&lt;/h1&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> Server.py<pre><code>import socket\n\nsock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nsock.bind(('', 9090))\nsock.listen(10)\n\nwhile True:\n    connection, address = sock.accept()\n    data = connection.recv(16384)\n    header = 'HTTP/1.1 200 OK\\n'\n    mimetype = 'text/html'\n    header += 'Content-Type: ' + str(mimetype) + '\\n\\n'\n    file = open('page.html', 'rb')\n    response = file.read()\n    file.close()\n    final_response = header.encode('utf-8')\n    final_response += response\n    connection.send(final_response)\n    connection.close()\n</code></pre> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0440\u0430\u0431\u043e\u0442\u044b \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b: </p>"},{"location":"Lab1/Task4/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 4","text":"<p>\u0417\u0430\u0434\u0430\u0447\u0430: \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0443\u0445\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043b\u0438 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0447\u0430\u0441\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u043b\u043b\u043e\u0432.</p> <p>\u041b\u0438\u0441\u0442\u0438\u043d\u0433 \u043a\u043e\u0434\u0430:</p> Server.py<pre><code>import socket\nimport threading\n\n\nclass Server:\n    def __init__(self, address):\n        self.users = {}\n        self.conn = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.conn.bind(address)\n        self.conn.listen(10)\n\n    def run(self):\n        while True:\n            sock, addrs = self.conn.accept()\n            sock.sendall('Enter your name:'.encode('UTF-8'))\n            name = sock.recv(4096).decode('utf-8')\n            print(sock)\n            self.users[sock] = name\n            self.dispatch(sock, f\"{name} joined the chat!\", sender=False)\n            threading.Thread(target=self.wait_for_message, args=(sock,)).start()\n\n    def dispatch(self, sender_socket, message, sender=True):\n        name = self.users[sender_socket]\n        for user in self.users:\n            if user != sender_socket:\n                if sender:\n                    user.sendall(f\"{name} : {message}\".encode('UTF-8'))\n                else:\n                    user.sendall(f\"{message}\".encode('UTF-8'))\n\n    def wait_for_message(self, sender_socket):\n        while True:\n            message = sender_socket.recv(4096).decode('utf-8')\n            self.dispatch(sender_socket, message)\n\n\nif __name__ == \"__main__\":\n    server_address = ('', 9090)\n    server = Server(server_address)\n    server.run()\n</code></pre> Client.py<pre><code>import socket\nimport threading\n\n\n\nclass User:\n    def __init__(self, address):\n        self.client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.address = address\n\n    def start(self):\n        self.client.connect(self.address)\n        server_message = self.client.recv(1024).decode('utf-8')\n        print(server_message)\n        message = input()\n        self.client.send(message.encode('UTF-8'))\n        threading.Thread(target=self.receive_message).start()\n        threading.Thread(target=self.send_message()).start()\n\n    def receive_message(self):\n        while True:\n            message = self.client.recv(4096).decode('UTF-8')\n            print(message)\n\n    def send_message(self):\n        while True:\n            message = input()\n            self.client.send(message.encode('UTF-8'))\n\n\nif __name__ == \"__main__\":\n    server_address = ('localhost', 9090)\n    user = User(server_address)\n    user.start()\n</code></pre> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0440\u0430\u0431\u043e\u0442\u044b \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b:  </p>"},{"location":"Lab1/Task5/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 4","text":"<p>\u0417\u0430\u0434\u0430\u0447\u0430: \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 web-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST http \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Python \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket.</p> <p>\u041b\u0438\u0441\u0442\u0438\u043d\u0433 \u043a\u043e\u0434\u0430:</p> Server.py<pre><code>import socket\nimport json\n\n\nclass MyHTTPServer:\n    def __init__(self, host, port):\n        self.host = host\n        self.port = port\n        self.grades = {}\n\n    def serve_forever(self):\n        server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        server_socket.bind((self.host, self.port))\n        server_socket.listen(10)\n        while True:\n            client_socket, addr = server_socket.accept()\n            self.serve_client(client_socket)\n\n    def serve_client(self, client_socket):\n        data = client_socket.recv(1024).decode('UTF-8')\n        try:\n            response = self.parse_request(data)\n            if response:\n                client_socket.send(response)\n        except Exception as e:\n            error_msg = \"HTTP/1.1 400 Bad Request\\n\\n\"\n            client_socket.send(error_msg.encode('utf-8'))\n        finally:\n            client_socket.close()\n\n    def parse_request(self, data):\n        lines = data.split('\\r\\n')\n        headers = lines[0].split()\n        print(f\"Headers : {headers}\")\n        if len(headers) != 3:\n            raise Exception(\"Bad request line\")\n        body = lines[-1]\n        if headers[0] == \"GET\":\n            return self.handle_get()\n        elif headers[0] == \"POST\":\n            return self.handle_post(body)\n        else:\n            raise Exception(\"There is no such method\")\n\n    def handle_get(self):\n        file = open('head.html', 'rb')\n        html = file.read()\n        response = \"HTTP/1.1 200 OK\\n\\n\"\n        response = response.encode('UTF-8')\n        response += html\n        for k, v in self.grades.items():\n            response += f\"&lt;tr&gt;&lt;th&gt;{k}&lt;/th&gt;&lt;th&gt;{v}&lt;/th&gt;&lt;/tr&gt;\".encode('UTF-8')\n        file = open('end.html', 'rb')\n        html = file.read()\n        response += html\n        return response\n\n    def handle_post(self, body):\n        body = json.loads(body)\n        self.grades[body['discipline']] = body['grade']\n        response = \"HTTP/1.1 200 OK\\n\\n\"\n        response = response.encode('UTF-8')\n        return response\n\n\nif __name__ == '__main__':\n    host = \"localhost\"\n    port = 9090\n    serv = MyHTTPServer(host, port)\n    try:\n        serv.serve_forever()\n    except KeyboardInterrupt:\n        pass\n</code></pre> <p>head.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"ru\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;\u041e\u0446\u0435\u043d\u043a\u0438&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;\u041e\u0446\u0435\u043d\u043a\u0438&lt;/h1&gt;\n    &lt;table border=\"1\"&gt;\n        &lt;thead&gt;\n            &lt;tr&gt;\n                &lt;th&gt;\u0414\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430&lt;/th&gt;\n                &lt;th&gt;\u041e\u0446\u0435\u043d\u043a\u0430&lt;/th&gt;\n            &lt;/tr&gt;\n        &lt;/thead&gt;\n        &lt;tbody id=\"grades-table\"&gt;\n</code></pre> head.html<pre><code>        &lt;/tbody&gt;\n    &lt;/table&gt;\n    &lt;h2&gt;\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0443 \u0438 \u043e\u0446\u0435\u043d\u043a\u0443&lt;/h2&gt;\n    &lt;form id=\"add-form\" onsubmit=\"submitFormFetch()\"&gt;\n        &lt;label&gt;\u0414\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430:&lt;/label&gt;\n        &lt;input type=\"text\" id=\"discipline\" required&gt;&lt;br&gt;\n        &lt;label&gt;\u041e\u0446\u0435\u043d\u043a\u0430:&lt;/label&gt;\n        &lt;input type=\"number\" id=\"grade\" min=\"1\" max=\"5\" required&gt;&lt;br&gt;\n        &lt;input type=\"submit\" value=\"\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c\"&gt;\n    &lt;/form&gt;\n\n    &lt;script&gt;\n        function submitFormFetch(event) {\n         let name = document.getElementById('discipline').value\n            let grade = document.getElementById('grade').value\n            console.log(name, grade)\n            let body = {\n                   discipline: name,\n                   grade: grade\n               }\n\n         fetch('http://localhost:9090', {\n               method: \"POST\",\n             body: JSON.stringify(body)\n            })\n            .catch((err) =&gt; {\n               alert(err);\n            });\n         return false;\n      }\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre></p> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0440\u0430\u0431\u043e\u0442\u044b \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b:  </p>"}]}